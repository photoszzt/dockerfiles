FROM phusion/baseimage:bionic-1.0.0
CMD ["/sbin/my_init"]

#install ava deps
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=America/Chicago

RUN apt-get update \
    && apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget bash-completion curl openssh-server sudo \
    && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
    && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' \
    && apt-get update \
    && apt-get purge --auto-remove cmake

ARG USER_NAME=ubuntu
ARG USER_UID

RUN useradd -b /home -m -s /bin/bash -u ${USER_UID} ${USER_NAME} && \
    usermod -p '*' ${USER_NAME} && \
    echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

RUN rm -f /etc/service/sshd/down
RUN /etc/my_init.d/00_regen_ssh_host_keys.sh
EXPOSE 22

COPY ./id_rsa.pub /tmp
RUN sudo -u ${USER_NAME} mkdir -p /home/${USER_NAME}/.ssh && \
    sudo -u ${USER_NAME} touch /home/${USER_NAME}/.ssh/authorized_keys && \
    cat /tmp/id_rsa.pub >> /home/${USER_NAME}/.ssh/authorized_keys && \
    rm /tmp/id_rsa.pub

# install cuda and dependencies
# base
RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

ENV CUDA_VERSION 10.1.243
ENV CUDA_PKG_VERSION 10-1=$CUDA_VERSION-1

RUN echo "export CUDA_VERSION=\"${CUDA_VERSION}\"" | tee -a /home/${USER_NAME}/.profile \
    && echo "export CUDA_PKG_VERSION=\"${CUDA_PKG_VERSION}\"" | tee -a /home/${USER_NAME}/.profile

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-$CUDA_PKG_VERSION \
    cuda-compat-10-1 \
    && ln -s /usr/local/cuda-10.1 /usr/local/cuda

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:$LD_LIBRARY_PATH
RUN echo "export PATH=\"${PATH}\"" | tee -a /home/${USER_NAME}/.profile \
    && echo "export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}\"" | tee -a /home/${USER_NAME}/.profile

ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES "compute,utility"
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.1 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419"
RUN echo "export NVIDIA_VISIBLE_DEVICES=\"${NVIDIA_VISIBLE_DEVICES}\"" | tee -a /home/${USER_NAME}/.profile \
    && echo "export NVIDIA_DRIVER_CAPABILITIES=\"${NVIDIA_DRIVER_CAPABILITIES}\"" | tee -a /home/${USER_NAME}/.profile \
    && echo "export NVIDIA_REQUIRE_CUDA=\"${NVIDIA_REQUIRE_CUDA}\"" | tee -a /home/${USER_NAME}/.profile

# runtime
ENV NCCL_VERSION 2.8.3
RUN echo "export NCCL_VERSION=\"${NCCL_VERSION}\"" | tee -a /home/${USER_NAME}/.profile
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-$CUDA_PKG_VERSION \
    cuda-npp-$CUDA_PKG_VERSION \
    cuda-nvtx-$CUDA_PKG_VERSION \
    libcublas10=10.2.1.243-1 \
    libnccl2=$NCCL_VERSION-1+cuda10.1 \
    && apt-mark hold libnccl2

# apt from auto upgrading the cublas package. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold libcublas10

# develp
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-nvml-dev-$CUDA_PKG_VERSION \
    cuda-command-line-tools-$CUDA_PKG_VERSION \
    cuda-nvprof-$CUDA_PKG_VERSION \
    cuda-npp-dev-$CUDA_PKG_VERSION \
    cuda-libraries-dev-$CUDA_PKG_VERSION \
    cuda-minimal-build-$CUDA_PKG_VERSION \
    libcublas-dev=10.2.1.243-1 \
    libnccl-dev=2.8.3-1+cuda10.1 \
    && apt-mark hold libnccl-dev

# apt from auto upgrading the cublas package. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold libcublas-dev

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs
RUN echo "export LIBRARY_PATH=\"${LIBRARY_PATH}\"" | tee -a /home/${USER_NAME}/.profile

# cudnn 7 and develp
ENV CUDNN_VERSION 7.6.5.32
RUN echo "export CUDNN_VERSION=\"${CUDNN_VERSION}\"" | tee -a /home/${USER_NAME}/.profile

LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt update && apt-get install -y --no-install-recommends \
    libcudnn7=$CUDNN_VERSION-1+cuda10.1 \
    libcudnn7-dev=$CUDNN_VERSION-1+cuda10.1 \
    && apt-mark hold libcudnn7

# install other ava dependencies from "install_dependencies.sh" script
RUN apt-get update && apt-get install -y cmake git build-essential python3 python3-pip libglib2.0-dev \
        clang-7 libclang-7-dev libboost-all-dev libconfig++-dev indent \
        ccache ninja-build

RUN apt -y install build-essential htop nano git gdb tmux python3-pip && \
    apt -y install less libxext6 libxrender1 libxtst6 libfreetype6 libxi6 && \
    apt -y clean

ENV PATH=/home/${USER_NAME}/.local/bin:$PATH
RUN echo "export PATH=\"${PATH}\"" | tee -a /home/${USER_NAME}/.profile

RUN /sbin/setuser ${USER_NAME} python3 -m pip install -U pip setuptools
RUN /sbin/setuser ${USER_NAME} python3 -m pip install setuptools pkgconfig --user
RUN /sbin/setuser ${USER_NAME} python3 -m pip install wget  \
        toposort astor 'numpy==1.15.0' blessings clang-format==9.0 pybind11 numba \
        opencv-python-headless --user
# RUN /sbin/setuser ${USER_NAME} python3 -m pip install projector-installer --user

# ENV PROJECTOR_BIN="/home/${USER_NAME}/.local/bin/projector"
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
RUN echo "export PROJECTOR_BIN=\"${PROJECTOR_BIN}\"" | tee -a /home/${USER_NAME}/.profile
RUN echo "export LC_ALL=\"${LC_ALL}\"" | tee -a /home/${USER_NAME}/.profile && \
    echo "export LANG=\"${LANG}\"" | tee -a /home/${USER_NAME}/.profile

# RUN /sbin/setuser ${USER_NAME} ${PROJECTOR_BIN} --accept-license \
#     ide autoinstall --config-name idea --port 8080 \
#     --ide-name "CLion 2020.3.2"
# EXPOSE 8080

# RUN sudo mkdir -p /etc/service/projector && \
#     echo "#!/bin/sh\nexec /sbin/setuser ${USER_NAME} ${PROJECTOR_BIN} config run" | sudo tee -a /etc/service/projector/run && \
#     sudo chmod +x /etc/service/projector/run

RUN echo "fs.inotify.max_user_watches = 524288" | sudo tee -a /etc/sysctl.conf

# install go
RUN wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz \
    && tar -C /usr/local -xf go1.16.5.linux-amd64.tar.gz
ENV PATH="${PATH}:/usr/local/go/bin:/root/go/bin"

# install grpc and protoc
RUN go get github.com/golang/protobuf/proto && \
    go get github.com/golang/protobuf/protoc-gen-go && \
    go get google.golang.org/grpc && \
    go get google.golang.org/grpc/cmd/protoc-gen-go-grpc

RUN sudo apt install unzip
RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protoc-3.17.3-linux-x86_64.zip \
    && mkdir protoc && unzip protoc-3.17.3-linux-x86_64.zip -d protoc \
    && chmod -R a+rx protoc \
    && sudo mv protoc/bin/* /usr/bin/ && sudo mv protoc/include/* /usr/include/ \
    && rm -rf protoc

RUN git clone --recurse-submodules -b v1.38.0 https://github.com/grpc/grpc \
    && cd grpc && mkdir -p cmake/build && cd cmake/build && cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF ../.. \
    && make -j && sudo make install \
    && cd - && mkdir -p third_party/abseil-cpp/cmake/build && cd third_party/abseil-cpp/cmake/build \
    && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE ../.. && make -j && sudo make install

RUN /sbin/setuser ${USER_NAME} python3 -m pip install astunparse pyyaml cffi typing_extensions future six requests dataclasses --user
RUN python3 -m pip install --prefix=/opt/intel/mkl mkl mkl-include
RUN cd /opt/intel/mkl/lib \
    && ln -s libmkl_avx.so.1 libmkl_avx.so \
    && ln -s libmkl_avx2.so.1 libmkl_avx2.so \
    && ln -s libmkl_avx512.so.1 libmkl_avx512.so \
    && ln -s libmkl_avx512_mic.so.1 libmkl_avx512_mic.so \
    && ln -s libmkl_blacs_intelmpi_ilp64.so.1 libmkl_blacs_intelmpi_ilp64.so \
    && ln -s libmkl_blacs_intelmpi_lp64.so.1 libmkl_blacs_intelmpi_lp64.so \
    && ln -s libmkl_blacs_openmpi_ilp64.so.1 libmkl_blacs_openmpi_ilp64.so \
    && ln -s libmkl_blacs_openmpi_lp64.so.1 libmkl_blacs_openmpi_lp64.so \
    && ln -s libmkl_blacs_sgimpt_ilp64.so.1 libmkl_blacs_sgimpt_ilp64.so \
    && ln -s libmkl_blacs_sgimpt_lp64.so.1 libmkl_blacs_sgimpt_lp64.so \
    && ln -s libmkl_cdft_core.so.1 libmkl_cdft_core.so \
    && ln -s libmkl_core.so.1 libmkl_core.so \
    && ln -s libmkl_def.so.1 libmkl_def.so \
    && ln -s libmkl_gf_ilp64.so.1 libmkl_gf_ilp64.so \
    && ln -s libmkl_gf_lp64.so.1 libmkl_gf_lp64.so \
    && ln -s libmkl_gnu_thread.so.1 libmkl_gnu_thread.so \
    && ln -s libmkl_intel_ilp64.so.1 libmkl_intel_ilp64.so \
    && ln -s libmkl_intel_lp64.so.1 libmkl_intel_lp64.so \
    && ln -s libmkl_intel_thread.so.1 libmkl_intel_thread.so \
    && ln -s libmkl_mc.so.1 libmkl_mc.so \
    && ln -s libmkl_mc3.so.1 libmkl_mc3.so \
    && ln -s libmkl_pgi_thread.so.1 libmkl_pgi_thread.so \
    && ln -s libmkl_rt.so.1 libmkl_rt.so \
    && ln -s libmkl_scalapack_ilp64.so.1 libmkl_scalapack_ilp64.so \
    && ln -s libmkl_scalapack_lp64.so.1 libmkl_scalapack_lp64.so \
    && ln -s libmkl_sequential.so.1 libmkl_sequential.so \
    && ln -s libmkl_tbb_thread.so.1 libmkl_tbb_thread.so \
    && ln -s libmkl_vml_avx.so.1 libmkl_vml_avx.so \
    && ln -s libmkl_vml_avx2.so.1 libmkl_vml_avx2.so \
    && ln -s libmkl_vml_avx512.so.1 libmkl_vml_avx512.so \
    && ln -s libmkl_vml_avx512_mic.so.1 libmkl_vml_avx512_mic.so \
    && ln -s libmkl_vml_cmpt.so.1 libmkl_vml_cmpt.so \
    && ln -s libmkl_vml_def.so.1 libmkl_vml_def.so \
    && ln -s libmkl_vml_mc.so.1 libmkl_vml_mc.so \
    && ln -s libmkl_vml_mc2.so.1 libmkl_vml_mc2.so \
    && ln -s libmkl_vml_mc3.so.1 libmkl_vml_mc3.so

RUN sudo apt install libjpeg-dev libpng-dev
